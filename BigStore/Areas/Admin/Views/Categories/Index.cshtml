@model PaginatedList<Category>
@{
    ViewData["Title"] = "Danh mục sản phẩm";
}

<h1>@ViewData["Title"]</h1>

<p>
    <a class="btn btn-primary btn-sm" asp-action="Create">Thêm danh mục</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Tên danh mục
            </th>
            <th>
                Slug
            </th>
            <th>Thao tác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            int level = 0;
            await RenderCategory(item, level);
        }
    </tbody>
</table>

@{
    async Task RenderCategory(Category item, int level)
    {
        string prefix = String.Concat(Enumerable.Repeat("&nbsp;&nbsp;&nbsp;&nbsp;", level));

        <tr>
            <td>
                <a asp-action="Details" asp-route-slug="@item.Slug">
                    @Html.Raw(prefix)
                    @Html.DisplayFor(modelItem => item.Title)
                </a>
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.Slug)
            </td>
            <td>
                <a class="btn btn-success" asp-action="Edit" asp-route-id="@item.Id">Chỉnh sửa</a>
                <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Xóa</a>
            </td>
        </tr>
        if (item.CategoryChildren?.Count > 0)
        {
            foreach (var cCategory in item.CategoryChildren)
            {
                await RenderCategory(cCategory, level + 1);
            }
        }
    }
}

@{
    Func<int?, string> generateUrl = (int? _pagenumber) =>
    {
        var currentUrl = Context.Request.Path;
        return Url.Page(currentUrl, new { pageIndex = _pagenumber });
    };

    var datapaging = new
    {
        currentPage = Model.PageIndex,
        countPages = Model.TotalPages,
        generateUrl = generateUrl
    };
}
<partial name="_Paging" model="@datapaging" />